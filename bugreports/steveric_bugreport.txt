After thorough testing, I have determined that the following function obtained from the 
steveric repository contains a bug:


 case feast: return 0;

The purpose of the feast card is to gain a card that costs up to 5 coins. 
Here, as can be seen, the feast card does not do anything and the function
immediately returns. The correct implementation of feast is as follows:

 case feast:
      //gain card with cost up to 5
      //Backup hand
      for (i = 0; i <= state->handCount[currentPlayer]; i++){
	temphand[i] = state->hand[currentPlayer][i];//Backup card
	state->hand[currentPlayer][i] = -1;//Set to nothing
      }
      //Backup hand

      //Update Coins for Buy
      updateCoins(currentPlayer, state, 5);
      x = 1;//Condition to loop on
      while( x == 1) {//Buy one card
	if (supplyCount(choice1, state) <= 0){
	  if (DEBUG)
	    printf("None of that card left, sorry!\n");

	  if (DEBUG){
	    printf("Cards Left: %d\n", supplyCount(choice1, state));
	  }
	}
	else if (state->coins < getCost(choice1)){
	  printf("That card is too expensive!\n");

	  if (DEBUG){
	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
	  }
	}
	else{

	  if (DEBUG){
	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
	  }

	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
	  x = 0;//No more buying cards

	  if (DEBUG){
	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
	  }

	}
      }     

      //Reset Hand
      for (i = 0; i <= state->handCount[currentPlayer]; i++){
	state->hand[currentPlayer][i] = temphand[i];
	temphand[i] = -1;
      }
      //Reset Hand
      			
      return 0;

This implementation allows the player to buy the card costing up to 5 coins, provided
that the user does not request a card that is too expensive or is not left in the deck.
It also notifies the users of why they can or cannot perform a specific action.

This bug can be triggered by the player playing the feast card. however, this function is 
contained inside of cardEFfect. In order to invoke the bug, the player would have to call
cardEffect, for example cardEffect(card, choice1, choice2, choice3, state, handPos, bonus).

The priority of this bug is an 8 out of 10. This bug can alter the course of the dominion game if
feast is called, and the result may be different from the one that should have actually occurred.
This issue would need ot be fixed quickly for a proper game of dominion to be played.

The severity of this issue is an 8 out of 10. Unlike the other 2 bugs, this is guaranteed to
change the course of the game if it is invoked. It is very likely that the card will be called
at least once, so the game result will very likely be different from what it should be, depending 
on the circumstances. Rather than perform any specific action, the function simply does not do 
anything and given that feast is actually a relatively complicated function, this can have
a major unwanted effect.